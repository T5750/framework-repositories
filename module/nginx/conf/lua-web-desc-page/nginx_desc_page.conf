upstream backend {
	server 127.0.0.1:8080 max_fails=5 fail_timeout=10s weight=1;
	check interval=3000 rise=1 fall=2 timeout=5000 type=tcp default_down=false;
	keepalive 100;
}

map $host $item_dynamic {
	default "0";
	item2015.jd.com "1";
}

map $cookie___jda $ab_key {
	default "0";
	~^\d+\.\d+(?P<k>(1|3|5))\. "1";
}

server {
	listen 80;
	server_name item2015.jd.com item.jd.com d.3.cn;
	set $template_root "/usr/servers/templates";

	location ~ /backend/(.*) {
		#internal;
		keepalive_timeout 30s;
		keepalive_requests 1000;
		#支持keep-alive
		proxy_http_version 1.1;
		proxy_set_header Connection "";
		rewrite /backend(/.*) $1 break;
		proxy_pass_request_headers off;
		#more_clear_input_headers Accept-Encoding;
		proxy_next_upstream error timeout;
		proxy_pass http://backend;
	}

	location ~ ^/desc/(\d+)$ {
		if ($host != "d.3.cn") {
			return 403;
		}
		default_type application/x-javascript;
		charset utf-8;
		lua_code_cache on;
		set $skuId $1;
		content_by_lua_file /usr/servers/templates/desc.lua;
	}

	location ~ ^/(\d+).html$ {
		set $skuId $1;
		if ($host !~ "^(item|item2015)\.jd\.com$") {
			return 403;
		}
		expires 3m;
		proxy_cache cache_item;
		proxy_cache_key $uri;
		proxy_cache_bypass $item_dynamic;
		proxy_no_cache $item_dynamic;
		proxy_cache_valid 200 301 3m;
		proxy_cache_use_stale updating error timeout invalid_header http_500 http_502 http_503 http_504;
		proxy_pass_request_headers off;
		proxy_set_header Host $host;
		#支持keep-alive
		proxy_http_version 1.1;
		proxy_set_header Connection "";
		proxy_pass http://127.0.0.1/proxy/$skuId.html;
		add_header X-Cache '$upstream_cache_status';
	}

	location ~ ^/proxy/(\d+).html$ {
		allow 127.0.0.1;
		deny all;
		keepalive_timeout 30s;
		keepalive_requests 1000;
		default_type 'text/html';
		charset utf-8;
		lua_code_cache on;
		set $skuId $1;
		content_by_lua_file /usr/servers/templates/item.lua;
	}

	location /purge {
		allow 127.0.0.1;
		allow 192.168.0.0/16;
		allow 192.168.1.100;
		deny all;
		proxy_cache_purge cache_item $arg_url;
	}

	location /testFoo {
		default_type 'text/html';
		keepalive_timeout 60s;
		keepalive_requests 1000;
		content_by_lua '
			ngx.print("testFoo : ", ngx.req.get_uri_args()["a"])
			ngx.log(ngx.ERR, "request testFoo")
		';
	}
	location /testBar {
		default_type 'text/html';
		keepalive_timeout 60s;
		keepalive_requests 1000;
		content_by_lua '
			ngx.print("testBar : ", ngx.req.get_uri_args()["a"])
			ngx.log(ngx.ERR, "request testBar")
		';
	}
	location /test {
		default_type 'text/html';
		lua_socket_connect_timeout 3s;
		lua_socket_send_timeout 3s;
		lua_socket_read_timeout 3s;
		lua_socket_pool_size 100;
		lua_socket_keepalive_timeout 60s;
		lua_socket_buffer_size 8k;
		content_by_lua '
			local resFoo, resBar = ngx.location.capture_multi{
				{ "/testFoo", { args = ngx.req.get_uri_args()} },
				{ "/testBar", { args = ngx.req.get_uri_args()} },
			}
			if resFoo.status == ngx.HTTP_OK then
				ngx.print(resFoo.body)
			end
			if resBar.status ~= ngx.HTTP_OK then
				--记录错误
			end
		';
	}

	location /abtestFoo {
		default_type 'text/html';
		if ($ab_key = "1") {
			echo_location /testFoo ngx.var.args;
		}
		if ($ab_key = "0") {
			echo_location /testBar ngx.var.args;
		}
	}

	location /abtestBar {
		default_type 'text/html';
		if ($ab_key = "1") {
			rewrite ^ /testFoo break;
			proxy_pass http://item.jd.com;
		}
		rewrite ^ /testBar break;
		proxy_pass http://item2015.jd.com;
	}

	location /abtestCookie {
		default_type 'text/html';
		content_by_lua '
			local ck = require("resty.cookie")
			local cookie = ck:new()
			local ab_key = "0"
			local jda = cookie:get("__jda")
			if jda then
				local v = ngx.re.match(jda, [[^\d+\.\d+(1|3|5)\.]])
				if v then
					ab_key = "1"
				end
			end
			if ab_key == "1" then
				cookie:set({key = "__jda", value = "122270672.1059377902.2", expires = ngx.cookie_time(ngx.time() + 3600 * 24)})
				ngx.exec("/testFoo", ngx.var.args)
			else
				cookie:set({key = "__jda", value = "122270672.1059377901.1", expires = ngx.cookie_time(ngx.time() + 3600 * 24)})
				ngx.print(ngx.location.capture("/testBar", {args = ngx.req.get_uri_args()}).body)
			end
		';
	}

	location /apiFoo {
		default_type 'text/html';
		echo_sleep 3;
		echo apiFoo : $arg_a;
	}
	location /apiBar {
		default_type 'text/html';
		echo_sleep 3;
		echo apiBar : $arg_a;
	}
	location /serial {
		default_type 'text/html';
		content_by_lua '
			local tStart = ngx.now()
			local resFoo = ngx.location.capture("/apiFoo", {args = ngx.req.get_uri_args()})
			local resBar = ngx.location.capture("/apiBar", {args = ngx.req.get_uri_args()})
			local tEnd = ngx.now()
			ngx.print(resFoo.body, "<br/>", resBar.body, "<br/>", tostring(tEnd-tStart))
		';
	}
	location /concurrencyFoo {
		default_type 'text/html';
		content_by_lua '
			local tStart = ngx.now()
			local resFoo,resBar = ngx.location.capture_multi({
				{"/apiFoo", {args = ngx.req.get_uri_args()}},
				{"/apiBar", {args = ngx.req.get_uri_args()}}
			})
			local tEnd = ngx.now()
			ngx.print(resFoo.body, "<br/>", resBar.body, "<br/>", tostring(tEnd-tStart))
		';
	}
	location /concurrencyBar {
		default_type 'text/html';
		content_by_lua '
			local tStart = ngx.now()
			local function capture(uri, args)
				return ngx.location.capture(uri, args)
			end
			local threadFoo = ngx.thread.spawn(capture, "/apiFoo", {args = ngx.req.get_uri_args()})
			local threadBar = ngx.thread.spawn(capture, "/apiBar", {args = ngx.req.get_uri_args()})
			local okFoo, resFoo = ngx.thread.wait(threadFoo)
			local okBar, resBar = ngx.thread.wait(threadBar)
			local tEnd = ngx.now()
			ngx.print(resFoo.body, "<br/>", resBar.body, "<br/>", tostring(tEnd-tStart))
		';
	}
}