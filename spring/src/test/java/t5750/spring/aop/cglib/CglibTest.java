package t5750.spring.aop.cglib;

import java.lang.reflect.Method;

import org.junit.Assert;
import org.junit.Test;

import net.sf.cglib.beans.BeanGenerator;
import net.sf.cglib.core.DefaultGeneratorStrategy;
import net.sf.cglib.proxy.Enhancer;
import net.sf.cglib.proxy.FixedValue;
import net.sf.cglib.proxy.MethodInterceptor;
import net.sf.cglib.proxy.Mixin;
import t5750.spring.aop.cglib.service.MixinFirst;
import t5750.spring.aop.cglib.service.MixinInterface;
import t5750.spring.aop.cglib.service.MixinSecond;
import t5750.spring.aop.cglib.service.impl.MixinFirstImpl;
import t5750.spring.aop.cglib.service.impl.MixinSecondImpl;
import t5750.spring.aop.cglib.service.impl.PersonService;

public class CglibTest {
	/**
	 * 4. Implementing Proxy Using cglib<br/>
	 * 4.1. Returning the Same Value
	 */
	@Test
	public void returnValue() throws Exception {
		Enhancer enhancer = new Enhancer();
		enhancer.setSuperclass(PersonService.class);
		enhancer.setCallback((FixedValue) () -> "Hello T5750!");
		PersonService proxy = (PersonService) enhancer.create();
		String res = proxy.sayHello(null);
		Assert.assertEquals("Hello T5750!", res);
	}

	/**
	 * 4.2. Returning Value Depending on a Method Signature
	 */
	@Test
	public void returnSignatureValue() throws Exception {
		Enhancer enhancer = new Enhancer();
		enhancer.setSuperclass(PersonService.class);
		enhancer.setCallback((MethodInterceptor) (obj, method, args, proxy) -> {
			if (method.getDeclaringClass() != Object.class
					&& method.getReturnType() == String.class) {
				return "Hello T5750!";
			} else {
				return proxy.invokeSuper(obj, args);
			}
		});
		PersonService proxy = (PersonService) enhancer.create();
		Assert.assertEquals("Hello T5750!", proxy.sayHello(null));
		int lengthOfName = proxy.lengthOfName("Mary");
		Assert.assertEquals(4, lengthOfName);
	}

	/**
	 * 5. Bean Creator
	 */
	@Test
	public void beanCreator() throws Exception {
		BeanGenerator beanGenerator = new BeanGenerator();
		beanGenerator.addProperty("name", String.class);
		Object myBean = beanGenerator.create();
		Method setter = myBean.getClass().getMethod("setName", String.class);
		setter.invoke(myBean, "some string value set by a cglib");
		Method getter = myBean.getClass().getMethod("getName");
		Assert.assertEquals("some string value set by a cglib",
				getter.invoke(myBean));
	}

	/**
	 * 6. Creating Mixin
	 */
	@Test
	public void createMixin() throws Exception {
		Mixin mixin = Mixin.create(
				new Class[] { MixinFirst.class, MixinSecond.class,
						MixinInterface.class },
				new Object[] { new MixinFirstImpl(), new MixinSecondImpl() });
		MixinInterface mixinDelegate = (MixinInterface) mixin;
		Assert.assertEquals("first behaviour", mixinDelegate.first());
		Assert.assertEquals("second behaviour", mixinDelegate.second());
	}

	/**
	 * Access the generated byte[] array directly
	 */
	@Test
	public void generateArray() throws Exception {
		Enhancer e = new Enhancer();
		e.setSuperclass(PersonService.class);
		e.setCallback((FixedValue) () -> "Hello T5750!");
		e.setStrategy(new DefaultGeneratorStrategy() {
			protected byte[] transform(byte[] b) {
				return b;
			}
		});
		PersonService obj = (PersonService) e.create();
		System.out.println(obj.sayHello(null));
	}
}